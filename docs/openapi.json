{
  "openapi": "3.0.0",
  "info": {
    "title": "Realtime API",
    "version": "0.1.1",
    "description": "\nOfficial SDK for Realtime API. This API provides real-time communication capabilities through WebSocket connections.\n\n## Core Classes\n\n### RealtimeClient\nThe main client class for interacting with the Realtime API. It handles WebSocket connections, authentication, and event management.\n\n```typescript\nconst client = new RealtimeClient({\n  url: 'wss://stardust.ticos.cn/realtime',\n  apiKey: 'YOUR_API_KEY'\n});\n\nawait client.connect();\n```\n\n### RealtimeAPI\nManages the API-level operations and provides methods for tool registration and execution.\n\n```typescript\nconst api = client.api;\nawait api.registerTool({\n  name: 'search',\n  description: 'Search for information',\n  parameters: {\n    type: 'object',\n    properties: {\n      query: { type: 'string' }\n    }\n  }\n});\n```\n\n### RealtimeConversation\nHandles conversation flow, message management, and state tracking.\n\n```typescript\nconst conversation = await client.createConversation();\nawait conversation.sendMessage('Hello!');\n```\n\n## Features\n- Real-time bidirectional communication\n- Support for text and audio messages\n- Tool registration and execution\n- Session management\n- Conversation state tracking\n\n## Authentication\nAll connections require an API key that should be passed in the Authorization header.\n    "
  },
  "servers": [
    {
      "url": "wss://stardust.ticos.cn/realtime",
      "description": "Production WebSocket endpoint"
    },
    {
      "url": "wss://staging.stardust.ticos.cn/realtime",
      "description": "Staging WebSocket endpoint"
    }
  ],
  "components": {
    "schemas": {
      "ClientOptions": {
        "description": "Configuration options for initializing the client",
        "type": "object",
        "properties": {
          "url": {
            "description": "WebSocket endpoint URL",
            "type": "string"
          },
          "apiKey": {
            "description": "API key for authentication",
            "type": "string"
          },
          "dangerouslyAllowAPIKeyInBrowser": {
            "description": "Whether to allow API key usage in browser (not recommended for production)",
            "type": "boolean"
          },
          "debug": {
            "description": "Enable debug logging",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "required": [
          "apiKey",
          "url"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ToolDefinition": {
        "description": "Tool definition for registering tools with the client",
        "type": "object",
        "properties": {
          "type": {
            "description": "Tool type, always \"function\"",
            "type": "string",
            "const": "function"
          },
          "id": {
            "description": "Optional unique identifier",
            "type": "string"
          },
          "name": {
            "description": "Name of the tool",
            "type": "string"
          },
          "description": {
            "description": "Description of what the tool does",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters schema",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "object"
              },
              "properties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false,
            "required": [
              "properties",
              "type"
            ]
          },
          "required": {
            "description": "Required parameter names",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "operation_mode": {
            "description": "Tool operation mode",
            "enum": [
              "client_mode",
              "server_mode"
            ],
            "type": "string"
          },
          "execution_type": {
            "description": "Tool execution type",
            "enum": [
              "asynchronous",
              "synchronous"
            ],
            "type": "string"
          },
          "result_handling": {
            "description": "How to handle the tool's result",
            "enum": [
              "ignore_result",
              "process_in_client",
              "process_in_llm"
            ],
            "type": "string"
          },
          "code": {
            "description": "Tool implementation code",
            "type": "string"
          },
          "language": {
            "description": "Programming language of the code",
            "enum": [
              "python",
              "shell"
            ],
            "type": "string"
          },
          "platform": {
            "description": "Operating system platform",
            "enum": [
              "linux",
              "macos",
              "windows"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "code",
          "description",
          "execution_type",
          "language",
          "name",
          "operation_mode",
          "parameters",
          "platform",
          "required",
          "result_handling",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "ItemType": {
        "description": "Base item type for conversation items",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "enum": [
              "audio",
              "image",
              "message",
              "text",
              "tool_call",
              "tool_response"
            ],
            "type": "string"
          },
          "role": {
            "enum": [
              "assistant",
              "user"
            ],
            "type": "string"
          },
          "content": {
            "type": "array",
            "items": {
              "description": "Union type for all possible content types",
              "anyOf": [
                {
                  "description": "Text content in a message",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "text"
                    },
                    "text": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "text",
                    "type"
                  ]
                },
                {
                  "description": "Audio content in a message",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "audio"
                    },
                    "audio": {
                      "type": "string"
                    },
                    "transcript": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "audio",
                    "type"
                  ]
                },
                {
                  "description": "Image content in a message",
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "image"
                    },
                    "image": {
                      "type": "string"
                    },
                    "caption": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "required": [
                    "image",
                    "type"
                  ]
                }
              ]
            }
          },
          "status": {
            "enum": [
              "completed",
              "incomplete"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "content",
          "id",
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "Event": {
        "description": "Base event interface",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "type"
        ],
        "$schema": "http://json-schema.org/draft-07/schema#"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Connect to the Realtime API WebSocket",
        "description": "\nEstablishes a WebSocket connection to the Realtime API. Once connected, you can send and receive messages in real-time.\n\n```typescript\nconst client = new RealtimeClient({\n  url: 'wss://stardust.ticos.cn/realtime',\n  apiKey: 'YOUR_API_KEY'\n});\n\nawait client.connect();\n```\n        ",
        "tags": [
          "WebSocket"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "gpt-4o-realtime-preview-2024-10-01",
              "enum": [
                "gpt-4o-realtime-preview-2024-10-01",
                "gpt-4o-realtime-preview-2024-03-01"
              ]
            },
            "description": "The model to use for the connection",
            "required": true
          },
          {
            "name": "version",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "2024-03-01"
            },
            "description": "API version to use",
            "required": false
          }
        ],
        "responses": {
          "101": {
            "description": "WebSocket connection established successfully"
          },
          "401": {
            "description": "Invalid or missing API key"
          },
          "429": {
            "description": "Rate limit exceeded"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    }
  }
}